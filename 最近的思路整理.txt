(1) 首先，一个高效的索引结构设计离不开对于  一致性(8字节的原子写和日志)  和  并发控制(细粒度锁机制以及硬件事务内存HTM)  的讨论
(2) 其次，当前根据HiKV这篇论文来看，主要的异构内存混合索引思想还是将B+树放到DRAM上以支持范围查询；同时将hash放到NVM上，并且设计一种高效的方法来管理hash与B+树的同步
(3) HiKV中的局限性在于其没有考虑好NVM的特性，而且采用传统的链式结构，因此这里有个可以作为接下来思路的地方，也即
    --- 对hash索引做出修改，比如设计新的hash函数以及hash单元数据排布格式；或者直接设计新的hash单元结点的数据形式
    --- 对B+树进行修改，主要的思路还是从降低B+树的同步修改开销以及B+树的合并等开销
    --- 对二者的结构同步方法进行修改
    --- 考虑到对象存储面向的是海量存储，因此还可以考虑hash结构的一个动态调整可扩容性
    ---  